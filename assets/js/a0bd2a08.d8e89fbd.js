"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[63224],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),l=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?i.createElement(h,s(s({ref:t},p),{},{components:n})):i.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<a;l++)s[l]=n[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},53082:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>s,metadata:()=>o,toc:()=>c,default:()=>p});var i=n(87462),r=(n(67294),n(3905));const a={title:"Optimistic Updates",id:"optimistic-updates",original_id:"optimistic-updates"},s=void 0,o={unversionedId:"guides/optimistic-updates",id:"version-4.5/guides/optimistic-updates",isDocsHomePage:!1,title:"Optimistic Updates",description:"Optimistic updates enable highly responsive and fast interfaces by avoiding network wait times.",source:"@site/versioned_docs/version-4.5/guides/optimistic-updates.md",sourceDirName:"guides",slug:"/guides/optimistic-updates",permalink:"/docs/4.5/guides/optimistic-updates",editUrl:"https://github.com/coinbase/rest-hooks/edit/master/docs/guides/optimistic-updates.md",tags:[],version:"4.5",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1630038660,formattedLastUpdatedAt:"8/26/2021",frontMatter:{title:"Optimistic Updates",id:"optimistic-updates",original_id:"optimistic-updates"},sidebar:"version-4.5/docs",previous:{title:"Immediate Mutation Updates",permalink:"/docs/4.5/guides/immediate-updates"},next:{title:"Redux integration",permalink:"/docs/4.5/guides/redux"}},c=[{value:"Partial updates",id:"partial-updates",children:[{value:"ArticleResource.ts",id:"articleresourcets",children:[]},{value:"PublishButton.tsx",id:"publishbuttontsx",children:[]}]},{value:"Optimistic create with instant updates",id:"optimistic-create-with-instant-updates",children:[{value:"ArticleResource.ts",id:"articleresourcets-1",children:[]},{value:"CreateArticle.tsx",id:"createarticletsx",children:[]}]}],l={toc:c};function p({components:e,...t}){return(0,r.kt)("wrapper",(0,i.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Optimistic updates enable highly responsive and fast interfaces by avoiding network wait times.\nAn update is optimistic by assuming the network is successful. In the case of any errors, Rest\nHooks will then roll back any changes in a way that deals with all possible race conditions."),(0,r.kt)("h2",{id:"partial-updates"},"Partial updates"),(0,r.kt)("p",null,"One common use case is for quick toggles. Here we demonstrate a publish button for an\narticle. Note that we need to include the primary key (",(0,r.kt)("inlineCode",{parentName:"p"},"id")," in this case) in the response\nbody to ensure the normalized cache gets updated correctly."),(0,r.kt)("h3",{id:"articleresourcets"},"ArticleResource.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Resource, MutateShape, SchemaDetail, AbstractInstanceType } from 'rest-hooks';\n\nexport default class ArticleResource extends Resource {\n  readonly id: string | undefined = undefined;\n  readonly title: string = '';\n  readonly content: string = '';\n  readonly published: boolean = false;\n\n  pk() {\n    return this.id;\n  }\n\n  static partialUpdateShape<T extends typeof Resource>(\n    this: T,\n  ): MutateShape<\n    SchemaDetail<Readonly<AbstractInstanceType<T>>>,\n    Readonly<object>,\n    Partial<AbstractInstanceType<T>>\n  > {\n    return {\n      ...super.partialUpdateShape(),\n      options: {\n        ...this.getFetchOptions(),\n        optimisticUpdate: (params: any, body: any) => ({\n          // we absolutely need the primary key here,\n          // but won't be sent in a partial update\n          id: params.id,\n          ...body,\n        }),\n      },\n    };\n  }\n}\n")),(0,r.kt)("h3",{id:"publishbuttontsx"},"PublishButton.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useFetcher } from 'rest-hooks';\nimport ArticleResource from 'ArticleResource';\n\nexport default function PublishButton({ id }: { id: string }) {\n  const update = useFetcher(ArticleResource.partialUpdateShape());\n\n  return (\n    <button onClick={() => update({ id }, { published: true })}>Publish</button>\n  );\n}\n")),(0,r.kt)("h2",{id:"optimistic-create-with-instant-updates"},"Optimistic create with instant updates"),(0,r.kt)("p",null,"Optimistic updates can also be combined with ",(0,r.kt)("a",{parentName:"p",href:"./immediate-updates"},"immediate updates"),", enabling updates to\nother endpoints instantly. This is most commonly seen when creating new items\nwhile viewing a list of them."),(0,r.kt)("p",null,"Here we demonstrate what could be used in a list of articles with a modal\nto create a new article. On submission of the form it would instantly\nadd to the list of articles the newly created article - without waiting on a network response."),(0,r.kt)("h3",{id:"articleresourcets-1"},"ArticleResource.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Resource, MutateShape, SchemaDetail, AbstractInstanceType } from 'rest-hooks';\n\nexport default class ArticleResource extends Resource {\n  readonly id: string | undefined = undefined;\n  readonly title: string = '';\n  readonly content: string = '';\n  readonly published: boolean = false;\n\n  pk() {\n    return this.id;\n  }\n\n  static createShape<T extends typeof SimpleResource>(\n    this: T,\n  ): MutateShape<\n    SchemaDetail<Readonly<AbstractInstanceType<T>>>,\n    Readonly<object>,\n    Partial<AbstractInstanceType<T>>\n  > {\n    return {\n      ...super.createShape(),\n      options: {\n        ...this.getFetchOptions(),\n        optimisticUpdate: (\n          params: Readonly<object>,\n          body: Readonly<object | string> | void,\n        ) => body,\n      },\n    };\n  }\n}\n\nexport const appendUpdater = (\n  newArticleID: string,\n  articleIDs: string[] | undefined,\n) => [...(articleIDs || []), newArticleID];\n")),(0,r.kt)("h3",{id:"createarticletsx"},"CreateArticle.tsx"),(0,r.kt)("p",null,"Since the actual ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," of the article is created on the server, we will need to fill\nin a temporary fake ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," here, so the ",(0,r.kt)("inlineCode",{parentName:"p"},"primary key")," can be generated. This is needed\nto properly normalize the article to be looked up in the cache."),(0,r.kt)("p",null,"Once the network responds, it will have a different ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", which will replace the existing\ndata. This is often seamless, but care should be taken if the fake ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," is used in any\nrenders - like to issue subsequent requests. We recommend disabling ",(0,r.kt)("inlineCode",{parentName:"p"},"edit")," type features\nthat rely on the ",(0,r.kt)("inlineCode",{parentName:"p"},"primary key")," until the network fetch completes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { useFetcher } from 'rest-hooks';\nimport uuid from 'uuid/v4';\nimport ArticleResource from 'ArticleResource';\n\nexport default function CreateArticle() {\n  const create = useFetcher(ArticleResource.createShape());\n  const submitHandler = useCallback(\n    data =>\n      // note the fake id we create.\n      create({}, { id: uuid(), ...data }, [\n        [ArticleResource.listShape(), {}, appendUpdater],\n      ]),\n    [create],\n  );\n\n  return <Form onSubmit={submitHandler}>{/* rest of form */}</Form>;\n}\n")))}p.isMDXComponent=!0}}]);
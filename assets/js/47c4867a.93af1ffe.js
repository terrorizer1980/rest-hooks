"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[39342],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},h=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=p(a),d=r,m=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return a?n.createElement(m,i(i({ref:t},h),{},{components:a})):n.createElement(m,i({ref:t},h))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},81131:(e,t,a)=>{a.r(t),a.d(t,{frontMatter:()=>o,contentTitle:()=>i,metadata:()=>s,assets:()=>l,toc:()=>p,default:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={authors:["ntucker"],tags:["releases","rest-hooks"],title:"Announcing Rest Hooks 2.0"},i=void 0,s={permalink:"/blog/2019/07/13/Announcing-Rest-Hooks-2.0",source:"@site/blog/2019-07-13-Announcing-Rest-Hooks-2.0.md",title:"Announcing Rest Hooks 2.0",description:"We use SemVer for Rest Hooks - so 2.0 represents some breaking changes. To minimize disruption",date:"2019-07-13T00:00:00.000Z",formattedDate:"July 13, 2019",tags:[{label:"releases",permalink:"/blog/tags/releases"},{label:"rest-hooks",permalink:"/blog/tags/rest-hooks"}],readingTime:5.485,truncated:!0,authors:[{name:"Nathaniel Tucker",title:"Creator of Rest Hooks",url:"https://github.com/ntucker",imageURL:"https://github.com/ntucker.png",key:"ntucker"}],prevItem:{title:"Rest Hooks 2.1 Released",permalink:"/blog/2019/08/07/Rest-Hooks-2.1-Released"}},l={authorsImageUrls:[void 0]},p=[{value:"Breaking changes",id:"breaking-changes",children:[{value:"Renaming",id:"renaming",children:[]},{value:"Extensibility",id:"extensibility",children:[]},{value:"Featherweight bundles",id:"featherweight-bundles",children:[]}]},{value:"Migration guide",id:"migration-guide",children:[]},{value:"What&#39;s next",id:"whats-next",children:[]}],h={toc:p};function c({components:e,...t}){return(0,r.kt)("wrapper",(0,n.Z)({},h,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We use ",(0,r.kt)("a",{parentName:"p",href:"https://semver.org/"},"SemVer")," for Rest Hooks - so 2.0 represents some breaking changes. To minimize disruption\nwe have been carefully considering these changes and awaiting community feedback to be confident\nthese are the right changes to make."),(0,r.kt)("p",null,"While some of these changes are simple renames to make the library more intuitive - some represent\nimportant progress to empowering the next chapter of Rest Hooks."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/coinbase/rest-hooks/releases/tag/2.0.0"},"https://github.com/coinbase/rest-hooks/releases/tag/2.0.0")," for a complete list of changes"),(0,r.kt)("h2",{id:"breaking-changes"},"Breaking changes"),(0,r.kt)("p",null,"Rest Hooks 2.0 mostly represents breaking changes. While some of these provide new functionality\nor capabilities, purely additive features will come in subsequent releases."),(0,r.kt)("h3",{id:"renaming"},"Renaming"),(0,r.kt)("h4",{id:"restprovider---cacheprovider"},"RestProvider -> CacheProvider"),(0,r.kt)("p",null,"The core provider has been renamed appropriately to represent what it actually does - manage\nthe cache. Since Rest Hooks is ",(0,r.kt)("strong",{parentName:"p"},"protocol agnostic")," by design it was not only misleading as name\nbut also didn't sufficiently express what the provider is actually ",(0,r.kt)("em",{parentName:"p"},"providing"),"."),(0,r.kt)("h4",{id:"requestshape---fetchshape"},"RequestShape -> FetchShape"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api/FetchShape"},"FetchShape")," is the core interface that enables Rest Hooks to be both\n",(0,r.kt)("strong",{parentName:"p"},"declarative"),", ",(0,r.kt)("strong",{parentName:"p"},"performant")," and ",(0,r.kt)("strong",{parentName:"p"},"protocol agnostic"),". The previous ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," terminology\nonly represented one-side of the entire request/response pattern in fetch. This did not comprehensively\nencapsulate the entirety of what it provided - thus we changed the name to ",(0,r.kt)("inlineCode",{parentName:"p"},"FetchShape")," to capture\nthe full cycle of behavior - from request all the way to handling the response that it provides."),(0,r.kt)("h4",{id:"resource-fetchshape-generators"},"Resource ",(0,r.kt)("inlineCode",{parentName:"h4"},"FetchShape")," generators"),(0,r.kt)("p",null,"Along the same lines, the provided static methods in ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/resource"},"Resource")," that return ",(0,r.kt)("inlineCode",{parentName:"p"},"FetchShapes"),"\nneed to accurately describe their return value. As such, the suffix has changed from ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Shape"),". Also,\nthe request for getting a singular entity - typically using a lookup id - has had its prefix changed\nfrom ",(0,r.kt)("inlineCode",{parentName:"p"},"single")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"detail")," to better reflect common ",(0,r.kt)("inlineCode",{parentName:"p"},"REST")," terminology."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"singleRequest() -> detailShape()"),(0,r.kt)("li",{parentName:"ul"},"listRequest() -> listShape()"),(0,r.kt)("li",{parentName:"ul"},"createRequest() -> createShape()"),(0,r.kt)("li",{parentName:"ul"},"updateRequest() -> updateShape()"),(0,r.kt)("li",{parentName:"ul"},"partialUpdateRequest() -> partialUpdateShape()"),(0,r.kt)("li",{parentName:"ul"},"deleteRequest() -> deleteShape()")),(0,r.kt)("h4",{id:"schema-types"},"Schema types"),(0,r.kt)("p",null,"Previously there were two generic used to distinguish between ",(0,r.kt)("inlineCode",{parentName:"p"},"Schema"),"s that return a single item and many to\nmark the expected return values of ",(0,r.kt)("inlineCode",{parentName:"p"},"detailShape()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"listShape()"),". Their names have been changed\nto be consistent with the new naming. ",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaBase")," is now ",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaDetail")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaArray")," is now\n",(0,r.kt)("inlineCode",{parentName:"p"},"SchemaList"),"."),(0,r.kt)("h3",{id:"extensibility"},"Extensibility"),(0,r.kt)("p",null,"A core tenant of Rest Hooks' design is to be flexible to match diverse use cases. Along those\nlines, some key improvements were made to enable easier extensibility and customization that will\nempower the next wave of applications using Rest Hooks."),(0,r.kt)("h4",{id:"cacheprovider-and-managers"},"CacheProvider and Managers"),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/Manager"},"Manager")," abstraction has existed since the beginning of Rest Hooks. The first Manager - ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/NetworkManager"},"NetworkManager"),"\norchestrated the complex world of fetching. It provided performance optimizations like fetch deduplication\nwhile providing Suspense promise resolution free of race conditions. This enabled the consistent bug-free behavior\nof Rest Hooks while maintaining its minimal bundle footprint. Later the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/SubscriptionManager"},"SubscriptionManager")," was added\nto enable keeping resources fresh."),(0,r.kt)("p",null,"However, it quickly became clear that this was only the beginning. To enable the next generation of\nManagers, ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/CacheProvider"},"CacheProvider")," now takes an ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/CacheProvider#managers-manager"},"array of managers"),"\nas a prop. As an undocumented behavior, the NetworkManager and SubscriptionManager\ncould previously be passed as arguments to customize their configuration. Instead\nyou can now override their defaults by sending both managers. Or build your own Managers\nto be used as well."),(0,r.kt)("h4",{id:"protocol-agnostic"},"Protocol Agnostic"),(0,r.kt)("p",null,"Initially, FetchShape included a member to get the url (",(0,r.kt)("inlineCode",{parentName:"p"},"getUrl()"),"). This was used to both\nprovide a lookup key for the results of a request as well as generate the url to send\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," using an object of params like ",(0,r.kt)("inlineCode",{parentName:"p"},"{ id: 5 }"),". This made it easy to override\njust the url portion of a shape for custom endpoints."),(0,r.kt)("p",null,"However, for protocols that don't base their requests on url like GraphQL this was a bit\nawkward. Additionally, manipulating the request/response based on fetch params ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/coinbase/rest-hooks/issues/87"},"became\ncumbersome when the fetch method had to parse the url"),"\ninstead of just access those params itself."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/docs/guides/endpoints#rpc"},"getUrl() -> getFetchKey() + fetch()")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If you were setting getUrl() before, you'll need to also override the ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/FetchShape#fetchparams-param-body-payload-promise-any"},"FetchShape.fetch()"),". getFetchKey() is only used as a lookup\nkey in the results table cache. ",(0,r.kt)("a",{parentName:"li",href:"/docs/api/FetchShape#fetchparams-param-body-payload-promise-any"},"FetchShape.fetch()"),"\nis responsible for constructing the actual url."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"fetch(url: string, body: Body) -> fetch(params: Params, body: Body)"))),(0,r.kt)("h4",{id:"hook-composition"},"Hook composition"),(0,r.kt)("p",null,"One of the biggest benefits of hooks is enabling composition of behavior via isolation of\nconcerns. Even the highest level hooks in Rest Hooks have always been simply compositions of\nother lower level hooks. However, without clear use cases of reuse - these lower level hooks\nsometimes crossed appropriate abstraction boundaries."),(0,r.kt)("p",null,"One of these cases is the ",(0,r.kt)("inlineCode",{parentName:"p"},"useError()")," hook, which now returns an error if one is found or\nundefined otherwise. Previously it had been throwing the error itself, which made it awkward\nto use outside the context of Error Boundaries\n(e.g., ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/no-suspense#usestatefulresourcetsx"},"useStatefulResource"),")."),(0,r.kt)("h3",{id:"featherweight-bundles"},"Featherweight bundles"),(0,r.kt)("p",null,"Keeping Rest Hooks bundle footprint small has been a conscious effort - enabled mostly\nby clean modular design. Sometimes this has to be balanced with maximum compatibility.\nKeeping this in mind, Rest Hooks will now leave polyfill loading up to the user. Instead\nof importing the polyfills it needs from core-js directly, it will assume they are loaded.\n",(0,r.kt)("strong",{parentName:"p"},"This means when using Rest Hooks 2.0 with the intent of IE compatibility - you will need\nto ensure you are loading the appropriate polyfills yourself.")),(0,r.kt)("p",null,"Leaving polyfills in the control of the application builder seems like the best practice\nfor libraries. This also means an application can potentially only load polyfills if they\nare needed."),(0,r.kt)("h2",{id:"migration-guide"},"Migration guide"),(0,r.kt)("p",null,"To summarize:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"RestProvider -> CacheProvider"),(0,r.kt)("li",{parentName:"ul"},"RequestShape -> FetchShape"),(0,r.kt)("li",{parentName:"ul"},"singleRequest() -> detailShape()"),(0,r.kt)("li",{parentName:"ul"},"listRequest() -> listShape()"),(0,r.kt)("li",{parentName:"ul"},"createRequest() -> createShape()"),(0,r.kt)("li",{parentName:"ul"},"updateRequest() -> updateShape()"),(0,r.kt)("li",{parentName:"ul"},"partialUpdateRequest() -> partialUpdateShape()"),(0,r.kt)("li",{parentName:"ul"},"deleteRequest() -> deleteShape()"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<CacheProvider manager={myNetworkManager} subscriptionManager={mySubcriptionManager}>")," -> ",(0,r.kt)("inlineCode",{parentName:"li"},"<CacheProvider managers={[myNetworkManager, mySubscriptionManager]}>")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/endpoints#rpc"},"FetchShape.getUrl() -> FetchShape.getFetchKey() + FetchShape.fetch()")),(0,r.kt)("li",{parentName:"ul"},"FetchShape.fetch(url: string, body: Body) -> FetchShape.fetch(params: Params, body: Body)"),(0,r.kt)("li",{parentName:"ul"},"SchemaBase -> SchemaDetail; SchemaArray -> SchemaList"),(0,r.kt)("li",{parentName:"ul"},"useError() returns error instead of throwing"),(0,r.kt)("li",{parentName:"ul"},"Polyfills are not included automatically")),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("p",null,"While an important milestone for Rest Hooks, work is far from over. We have some exciting\nfeatures planned to be released soon. Here's a sneak peak of the 'soon' lineup:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Garbage collection"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/coinbase/rest-hooks/issues/96"},"Optimistic query update on create")),(0,r.kt)("li",{parentName:"ul"},"Automatic query batching"),(0,r.kt)("li",{parentName:"ul"},"Caching in Service Workers (PWA)"),(0,r.kt)("li",{parentName:"ul"},"Server Side Rendering guide"),(0,r.kt)("li",{parentName:"ul"},"Concurrent mode test suite")),(0,r.kt)("p",null,"We're also experimenting with a CLI to generate ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/resource"},"Resource")," stubs from OpenAPI\nschemas."),(0,r.kt)("p",null,"If any of these ideas excite you, or you have ideas of your own for Rest Hooks, we encourage you\nto share your feedback by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/coinbase/rest-hooks/issues/new/choose"},"creating an issue"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/coinbase/rest-hooks/compare"},"contributing code"),"."))}c.isMDXComponent=!0}}]);
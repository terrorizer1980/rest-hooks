"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[42261],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(r),m=s,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(h,a(a({ref:t},l),{},{components:r})):n.createElement(h,a({ref:t},l))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},26414:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>o,contentTitle:()=>a,metadata:()=>i,toc:()=>c,default:()=>l});var n=r(87462),s=(r(67294),r(3905));const o={title:"Resources with nested structure",sidebar_label:"Nesting related resources (server-side join)",id:"nested-response",original_id:"nested-response"},a=void 0,i={unversionedId:"guides/nested-response",id:"version-4.1/guides/nested-response",isDocsHomePage:!1,title:"Resources with nested structure",description:"Say you have a foreignkey author, and an array of foreign keys to contributors.",source:"@site/versioned_docs/version-4.1/guides/nested-response.md",sourceDirName:"guides",slug:"/guides/nested-response",permalink:"/docs/4.1/guides/nested-response",editUrl:"https://github.com/coinbase/rest-hooks/edit/main/website-2/docs/guides/nested-response.md",tags:[],version:"4.1",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1630038660,formattedLastUpdatedAt:"8/26/2021",frontMatter:{title:"Resources with nested structure",sidebar_label:"Nesting related resources (server-side join)",id:"nested-response",original_id:"nested-response"},sidebar:"version-4.1/docs",previous:{title:"Multi-column primary key",permalink:"/docs/4.1/guides/multi-pk"},next:{title:"Capturing Mutation Side-Effects",permalink:"/docs/4.1/guides/rpc"}},c=[{value:"asSchema",id:"asschema",children:[]},{value:"Circular dependencies",id:"circular-dependencies",children:[]}],u={toc:c};function l({components:e,...t}){return(0,s.kt)("wrapper",(0,n.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Say you have a foreignkey author, and an array of foreign keys to contributors."),(0,s.kt)("p",null,"First we need to model what this will look like by adding members to our ",(0,s.kt)("a",{parentName:"p",href:"/docs/4.1/api/resource"},"Resource")," defintion.\nThese should be the primary keys of the entities we care about."),(0,s.kt)("p",null,"Next we'll need to extend the schema definition provided by ",(0,s.kt)("a",{parentName:"p",href:"/docs/4.1/api/resource#static-getentityschema-schemaentity-https-githubcom-ntucker-normalizr-blob-master-docs-apimd-entitykey-definition-options"},"asSchema()"),"."),(0,s.kt)("h2",{id:"asschema"},"asSchema"),(0,s.kt)("h4",{id:"resourcesarticleresourcets"},(0,s.kt)("inlineCode",{parentName:"h4"},"resources/ArticleResource.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Resource, schemas, AbstractInstanceType } from 'rest-hooks';\nimport { UserResource } from 'resources';\n\nexport default class ArticleResource extends Resource {\n  readonly id: number | undefined = undefined;\n  readonly content: string = '';\n  readonly author: number | null = null;\n  readonly contributors: number[] = [];\n\n  pk() {\n    return this.id?.toString();\n  }\n  static urlRoot = 'http://test.com/article/';\n\n  static schema = {\n    author: UserResource.asSchema(),\n    contributors: [UserResource.asSchema()],\n  };\n}\n")),(0,s.kt)("p",null,"Upon fetching the nested items will end up in the cache so they can be retrieved with ",(0,s.kt)("a",{parentName:"p",href:"/docs/4.1/api/useCache"},"useCache()")),(0,s.kt)("h4",{id:"articlelisttsx"},(0,s.kt)("inlineCode",{parentName:"h4"},"ArticleList.tsx")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useResource } from 'rest-hooks';\nimport ArticleResource from 'resources/ArticleResource';\n\nexport default function ArticleList({ id }: { id: number }) {\n  const articles = useResource(ArticleResource.listShape(), { id });\n\n  return (\n    <React.Fragment>\n      {articles.map(article => (\n        <ArticleInline key={article.pk()} article={article} />\n      ))}\n    </React.Fragment>\n  );\n}\n\nfunction ArticleInline({ article }: { article: ArticleResource }) {\n  const author = useCache(UserResource.detailShape(), { id: article.author });\n  // some jsx here\n}\n")),(0,s.kt)("h2",{id:"circular-dependencies"},"Circular dependencies"),(0,s.kt)("p",null,"If two or more ",(0,s.kt)("a",{parentName:"p",href:"/docs/4.1/api/resource"},"Resources")," include each other in their schema, you can dynamically override\none of their ",(0,s.kt)("a",{parentName:"p",href:"/docs/4.1/api/resource#static-getentityschema-schemaentity-https-githubcom-ntucker-normalizr-blob-master-docs-apimd-entitykey-definition-options"},"asSchema()")," to avoid circular imports."),(0,s.kt)("h4",{id:"resourcesarticleresourcets-1"},(0,s.kt)("inlineCode",{parentName:"h4"},"resources/ArticleResource.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Resource, schemas, AbstractInstanceType } from 'rest-hooks';\nimport { UserResource } from 'resources';\n\nexport default class ArticleResource extends Resource {\n  readonly id: number | undefined = undefined;\n  readonly content: string = '';\n  readonly author: number | null = null;\n  readonly contributors: number[] = [];\n\n  pk() {\n    return this.id?.toString();\n  }\n  static urlRoot = 'http://test.com/article/';\n\n  static schema = {\n    author: UserResource.asSchema(),\n    contributors: [UserResource.asSchema()],\n  };\n}\n\nUserResource.schema = {\n  posts: [ArticleResource.asSchema()],\n};\n")),(0,s.kt)("h4",{id:"resourcesuserresourcets"},(0,s.kt)("inlineCode",{parentName:"h4"},"resources/UserResource.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Resource } from 'rest-hooks';\n// no need to import ArticleResource as the asSchema() override happens there.\n\nexport default class UserResource extends Resource {\n  readonly id: number | undefined = undefined;\n  readonly name: string = '';\n  readonly posts: number[] = [];\n\n  pk() {\n    return this.id?.toString();\n  }\n  static urlRoot = 'http://test.com/user/';\n}\n")))}l.isMDXComponent=!0}}]);
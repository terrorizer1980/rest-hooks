/*! For license information please see 4f6c780a.ee576514.js.LICENSE.txt */
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[29859],{62525:e=>{var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(o){return!1}}()?Object.assign:function(e,a){for(var s,i,l=o(e),u=1;u<arguments.length;u++){for(var c in s=Object(arguments[u]))n.call(s,c)&&(l[c]=s[c]);if(t){i=t(s);for(var d=0;d<i.length;d++)r.call(s,i[d])&&(l[i[d]]=s[i[d]])}}return l}},41535:(e,t,n)=>{var r=n(62525),o=60103,a=60106;var s=60109,i=60110,l=60112;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),a=d("react.portal"),d("react.fragment"),d("react.strict_mode"),d("react.profiler"),s=d("react.provider"),i=d("react.context"),l=d("react.forward_ref"),d("react.suspense"),d("react.suspense_list"),u=d("react.memo"),c=d("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function k(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var v=k.prototype=new g;v.constructor=k,r(v,y.prototype),v.isPureReactComponent=!0;var b=Array.isArray,w=Object.prototype.hasOwnProperty,j={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,a={},s=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(s=""+t.key),t)w.call(t,r)&&!x.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:o,type:e,key:s,ref:i,props:a,_owner:j.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var N=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,n,r,s){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var l=!1;if(null===e)l=!0;else switch(i){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return s=s(l=e),e=""===r?"."+S(l,0):r,b(s)?(n="",null!=e&&(n=e.replace(N,"$&/")+"/"),R(s,t,n,"",(function(e){return e}))):null!=s&&(P(s)&&(s=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,n+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(N,"$&/")+"/")+e)),t.push(s)),1;if(l=0,r=""===r?".":r+":",b(e))for(var u=0;u<e.length;u++){var c=r+S(i=e[u],u);l+=R(i,t,n,c,s)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(i=e.next()).done;)l+=R(i=i.value,t,n,c=r+S(i,u++),s);else if("object"===i)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function T(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function I(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var F={current:null},_={transition:0}},27378:(e,t,n)=>{n(41535)},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,h=p["".concat(l,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},33414:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>a,contentTitle:()=>s,metadata:()=>i,toc:()=>l,default:()=>p});var r=n(87462),o=(n(27378),n(3905));const a={title:"Render as you Fetch"},s=void 0,i={unversionedId:"guides/render-as-you-fetch",id:"guides/render-as-you-fetch",isDocsHomePage:!1,title:"Render as you Fetch",description:"A core design feature of Rest Hooks is decoupling actual data retrieval from data",source:"@site/../docs/guides/render-as-you-fetch.md",sourceDirName:"guides",slug:"/guides/render-as-you-fetch",permalink:"/docs/guides/render-as-you-fetch",editUrl:"https://github.com/coinbase/rest-hooks/edit/master/docs/guides/render-as-you-fetch.md",tags:[],version:"current",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1599256550,formattedLastUpdatedAt:"9/4/2020",frontMatter:{title:"Render as you Fetch"},sidebar:"docs",previous:{title:"Fetching multiple resources at once",permalink:"/docs/guides/fetch-multiple"},next:{title:"Immediate Mutation Updates",permalink:"/docs/guides/immediate-updates"}},l=[{value:"Route preload example",id:"route-preload-example",children:[{value:"Resource Definitions",id:"resource-definitions",children:[]},{value:"Preloader",id:"preloader",children:[]},{value:"Components using data",id:"components-using-data",children:[]},{value:"Routing",id:"routing",children:[]}]}],u=(c="SuspenseList",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)});var c;const d={toc:l};function p({components:e,...t}){return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A core design feature of Rest Hooks is decoupling actual data retrieval from data\nusage. This means hooks that want to ensure data availability like ",(0,o.kt)("a",{parentName:"p",href:"../api/useRetrieve"},"useRetrieve()"),"\nor ",(0,o.kt)("a",{parentName:"p",href:"../api/useresource"},"useResource()")," actually only dispatch the request to fetch. ",(0,o.kt)("a",{parentName:"p",href:"../api/NetworkManager"},"NetworkManager"),"\nthen uses its global awareness to determine whether to fetch. This means, for instance, that\nduplicate requests for data can be deduped into one fetch, with one promise to resolve."),(0,o.kt)("p",null,"Another interesting implication is that fetches started imperatively via ",(0,o.kt)("a",{parentName:"p",href:"../api/useFetcher"},"useFetcher"),"\nwon't result in redundant fetches. This is known as 'fetch then render,' and often results\nin an improved user experience."),(0,o.kt)("p",null,"These are some scenarios where this pattern is especially useful:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Server Side Rendering"),(0,o.kt)("li",{parentName:"ul"},"Loading data in parallel with code"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/concurrent-mode-intro.html"},"Concurrent Mode"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist"},"SuspenseList")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/concurrent-mode-reference.html#usetransition"},"useTransition()"))))),(0,o.kt)("p",null,"Fetch-then-render can be adopted incrementally. Components using data can ",(0,o.kt)("a",{parentName:"p",href:"../api/useresource"},"useResource()"),"\nand be assured they will get their data when it's ready. And when render-as-you-fetch optimizations\nare added later - ",(0,o.kt)("em",{parentName:"p"},"those components don't need to change"),". This makes data usage ",(0,o.kt)("em",{parentName:"p"},"tightly coupled"),",\nand fetch optimization ",(0,o.kt)("em",{parentName:"p"},"loosely coupled"),"."),(0,o.kt)("h2",{id:"route-preload-example"},"Route preload example"),(0,o.kt)("p",null,"In most cases the best time to pre-fetch data is at the routing layer. Doing this\nmakes incorporating all of the above capabilities quite easy. Here we'll walk through\na ",(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/concurrent-react-example-ly1ds"},"small demo")," that\nincorporates concurrent mode with SuspenseList, and useTransition().\nHowever, it would be quite easy to extend this to also support server side rendering and\ncode splitting routes with paraellel data and code loading."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/concurrent-react-example-ly1ds"},"See full demo here")),(0,o.kt)("h3",{id:"resource-definitions"},"Resource Definitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"export class PostResource extends SlowFetchResource {\n  readonly id: number | undefined = undefined;\n  readonly userId: number | null = null;\n  readonly title: string = '';\n  readonly body: string = '';\n\n  pk() {\n    return this.id?.toString();\n  }\n  static urlRoot = 'https://jsonplaceholder.typicode.com/posts/';\n}\n\nexport interface Address {\n  readonly street: string;\n  readonly suite: string;\n  readonly city: string;\n  readonly zipcode: string;\n  readonly geo: {\n    readonly lat: string;\n    readonly lng: string;\n  };\n}\n\nexport class UserResource extends SlowFetchResource {\n  readonly id: number | undefined = undefined;\n  readonly name: string = '';\n  readonly username: string = '';\n  readonly email: string = '';\n  readonly phone: string = '';\n  readonly website: string = '';\n  readonly address: Address | null = null;\n\n  pk() {\n    return this.id?.toString();\n  }\n  static urlRoot = 'https://jsonplaceholder.typicode.com/users/';\n}\n")),(0,o.kt)("h3",{id:"preloader"},"Preloader"),(0,o.kt)("p",null,"This is a preload hook for one route. It returns a function that will load\nthe data needed for that route."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useCallback } from 'react';\nimport { useFetcher } from 'rest-hooks';\nimport { UserResource, PostResource } from 'resources';\n\nfunction useFriendPreloader() {\n  const fetchUser = useFetcher(UserResource.detail(), true);\n  const fetchPosts = useFetcher(PostResource.list(), true);\n  // ideally we could also fetch the comments for each post at this point\n  // however, the API has no solution to this, so we have to have one cascade\n  // waterfall here.\n\n  // Alternative API designs include nesting, HTTP/2 server push, and an endpoint\n  // to fetch comments based on a user rather than post.\n\n  return useCallback(\n    (friendId: number) => {\n      fetchUser({ id: friendId });\n      fetchPosts({ id: friendId });\n    },\n    [fetchUser, fetchPosts],\n  );\n}\n")),(0,o.kt)("h3",{id:"components-using-data"},"Components using data"),(0,o.kt)("h4",{id:"friendcard"},"FriendCard"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const FriendCard = () => {\n  // useData gets the route context\n  const { friendId } = useData();\n  const friend = useResource(UserResource.detail(), { id: friendId });\n  // render some JSX\n};\n")),(0,o.kt)("h4",{id:"posts"},"Posts"),(0,o.kt)("p",null,"Here we use ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist"},"\\",(0,o.kt)(u,{mdxType:"SuspenseList"}))," and ",(0,o.kt)("a",{parentName:"p",href:"../api/useresource"},"useResource()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'const Posts = () => {\n  // useData gets the route context\n  const { friendId } = useData();\n  const posts = useResource(PostResource.list(), { userId: friendId });\n\n  // By using a SuspenseList here, we can guarantee that posts\n  // appear in the optimal viewing order, despite separately loading comments.\n  // Using "forwards" and "collapsed", we always see earlier loaded posts before later,\n  // but never later loaded posts before earlier. This avoids the page "popping"\n  // as it resizes with the comment section.\n  // Suspsense lets us "unlock" the title and body of the first post, but avoid\n  // showing other posts or having to wait for all the comments to load to display.\n\n  // I\'ve also chunked posts to appear two at a time inside a Suspense boundary.\n  // This is mostly to explore the possibilities of Suspense - displaying data\n  // exactly on our terms, rather than merely when the network returns.\n\n  // LOOK: Uncomment / recomment the Suspense boundaries in Posts and Post to\n  // see how boundaries at different layers can affect users.\n  // Remove the SuspenseList and see how much jankier it looks!\n\n  const chunkedPosts = chunk(posts, 2);\n\n  return (\n    <>\n      <div className="flex flex-wrap -mx-4">\n        <SuspenseList revealOrder="forwards" tail="collapsed">\n          {chunkedPosts.map(([post1, post2]: any) => (\n            <React.Fragment key={post1.id}>\n              {post1 && (\n                <div key={post1.id} className="w-1/2">\n                  <Post post={post1} />\n                </div>\n              )}\n              {post2 && (\n                <div key={post2.id} className="w-1/2">\n                  <Post post={post2} />\n                </div>\n              )}\n            </React.Fragment>\n          ))}\n        </SuspenseList>\n      </div>\n    </>\n  );\n};\n')),(0,o.kt)("h3",{id:"routing"},"Routing"),(0,o.kt)("p",null,"To make things easier, routing libraries could adopt two properties defined for each route -\nthe component information (either a path or function to load it) and a hook like\nthis that returns a function to call to preload."),(0,o.kt)("p",null,"In our example we're just scrapping together a very redimentary routing layer. This is\nnot very extensible but demonstrates incorporating preloading with ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/concurrent-mode-reference.html#usetransition"},"useTransition()")),(0,o.kt)("p",null,"To see all of this in context ",(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/concurrent-react-example-ly1ds"},"check out the demo"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  // where we store the route\n  const [friendId, setFriendId] = useState(1);\n  const [startTransition, isPending] = useTransition(SUSPENSE_CONFIG);\n  const preload = useFriendPreloader();\n\n  // effectively route change trigger\n  const changeFriend = useCallback(\n    friendId => {\n      // This becomes more meaningful when you start code splitting and load\n      // load with suspense as well. Then you don't have to wait on the code\n      // loading to start the data fetch.\n      preload(friendId);\n      // This delays commiting the React tree with new friendId until\n      // suspense is resolved.\n      startTransition(() => {\n        setFriendId(friendId);\n      });\n    },\n    [startTransition],\n  );\n\n  const context = {\n    friendId: friendId,\n    changeFriend: changeFriend,\n    isPending,\n  };\n\n  return (\n    <ErrorBoundary\n      FallbackComponent={props => {\n        console.error(props.error);\n        return <span>Error</span>;\n      }}\n    >\n      <DataContext.Provider value={context}>\n        <Suspense fallback={null}>\n          {/* Null fallback means less intermediate loading spinners */}\n          <Core />\n        </Suspense>\n      </DataContext.Provider>\n    </ErrorBoundary>\n  );\n}\n")))}p.isMDXComponent=!0}}]);